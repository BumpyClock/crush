diff --git a/internal/config/provider.go b/internal/config/provider.go
index 68ede509..2205fc75 100644
--- a/internal/config/provider.go
+++ b/internal/config/provider.go
@@ -12,7 +12,6 @@ import (
 	"time"
 
 	"github.com/charmbracelet/catwalk/pkg/catwalk"
-	"github.com/charmbracelet/crush/internal/home"
 )
 
 type ProviderClient interface {
@@ -42,7 +41,7 @@ func providerCacheFileData() string {
 		return filepath.Join(localAppData, appName, "providers.json")
 	}
 
-	return filepath.Join(home.Dir(), ".local", "share", appName, "providers.json")
+	return filepath.Join(os.Getenv("HOME"), ".local", "share", appName, "providers.json")
 }
 
 func saveProvidersInCache(path string, providers []catwalk.Provider) error {
@@ -94,36 +93,57 @@ func loadProvidersOnce(client ProviderClient, path string) ([]catwalk.Provider,
 }
 
 func loadProviders(client ProviderClient, path string) (providerList []catwalk.Provider, err error) {
+	// Get catwalk providers (existing behavior)
+	var catwalkProviders []catwalk.Provider
+	
 	// if cache is not stale, load from it
 	stale, exists := isCacheStale(path)
 	if !stale {
 		slog.Info("Using cached provider data", "path", path)
-		providerList, err = loadProvidersFromCache(path)
-		if len(providerList) > 0 && err == nil {
+		catwalkProviders, err = loadProvidersFromCache(path)
+		if len(catwalkProviders) > 0 && err == nil {
 			go func() {
-				slog.Info("Updating provider cache in background", "path", path)
+				slog.Info("Updating provider cache in background")
 				updated, uerr := client.GetProviders()
 				if len(updated) > 0 && uerr == nil {
 					_ = saveProvidersInCache(path, updated)
 				}
 			}()
-			return
 		}
 	}
-
-	slog.Info("Getting live provider data", "path", path)
-	providerList, err = client.GetProviders()
-	if len(providerList) > 0 && err == nil {
-		err = saveProvidersInCache(path, providerList)
-		return
+	
+	// If we don't have cached providers or cache is stale, get live data
+	if len(catwalkProviders) == 0 || stale {
+		slog.Info("Getting live provider data")
+		catwalkProviders, err = client.GetProviders()
+		if len(catwalkProviders) > 0 && err == nil {
+			err = saveProvidersInCache(path, catwalkProviders)
+		} else if exists {
+			// Fallback to cache if live fetch fails
+			catwalkProviders, err = loadProvidersFromCache(path)
+		}
+		
+		if len(catwalkProviders) == 0 && err != nil {
+			err = fmt.Errorf("failed to load providers")
+		}
 	}
-	if !exists {
-		err = fmt.Errorf("failed to load providers")
-		return
+	
+	// Get OAuth providers
+	cfg := Get()
+	if cfg != nil {
+		dataDirectory := cfg.Options.DataDirectory
+		oauthProviders := GetOAuthProviders(dataDirectory)
+		
+		// Convert OAuth providers to catwalk.Provider format and add them
+		for _, oauthProvider := range oauthProviders {
+			displayProvider := oauthProvider.ToDisplayProvider()
+			catwalkProviders = append(catwalkProviders, displayProvider)
+		}
+		
+		slog.Info("Added OAuth providers to provider list", "count", len(oauthProviders))
 	}
-	slog.Info("Loading provider data from cache", "path", path)
-	providerList, err = loadProvidersFromCache(path)
-	return
+	
+	return catwalkProviders, err
 }
 
 func isCacheStale(path string) (stale, exists bool) {
